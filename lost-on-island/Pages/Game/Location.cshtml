@page
@model lost_on_island.Pages.Game.LocationModel
@{
    var gameState = Model.GameState;
}


<div class="game-container">
    <div style="background-image: url('@Url.Content($"~/../{Model.CurrentLocation.ImagePath}")')" class="background-overlay"></div>

    <div class="location__title__container">
        <h1 class="location__title--font location__title--header">@Model.CurrentLocation.Title</h1>
        <p class="location__title--font location__title--description">@Model.CurrentLocation.Description</p>
    </div>


    <form method="post" asp-page-handler="ToggleRiskyMode">
        <button type="button" onClick="handleRiskToggler(this)" class="button-toggle @(Model.GameState.IsRiskyMode ? "risky" : "safe")" style="background-image: url('@Url.Content("~/Images/icons/riskysafebutton.png")');">
        </button>
    </form>

    <div class="card-pack">
        @for (int i = 0; i < 3; i++)
        {
            <form method="post" asp-page-handler="HandleCardClick" class="card-form">
                <div class="card pack-of-cards" style="background-image: url('@(Model.GameState.IsRiskyMode ? "/Images/card-risk-background.png" : "/Images/card-safe-background.png")');">
                </div>
                <div class="card" onclick="handleCardAnimation(this)">
                    <div class="card--inner">
                        <div style="background-image: url('@(Model.GameState.IsRiskyMode ? "/Images/card-risk-background.png" : "/Images/card-safe-background.png")');" class="card--back">
                        </div>
                        <input type="hidden" name="cardId" value="@Model.SingleLocationCard.Id" />

                        <div class="card--front" onclick="handleCardClick(this)" style="background-image: url('@(Model.GameState.IsRiskyMode ? "/Images/card-risk-foreground.png" : "/Images/card-safe-foreground.png")');">
                            <h3 class="card__title">@Model.SingleLocationCard.Title</h3>
                            <p class ="card__description">@Model.SingleLocationCard.Description</p>
                            <img class="card__icon" src="@Model.SingleLocationCard.Img" alt="Card Image" />
                            <p class ="card__description">@(Model.SingleLocationCard.ItemCount > 0 ? "+" : "")@Model.SingleLocationCard.ItemCount @Model.SingleLocationCard.ItemDescription</p>
                        </div>
                    </div>
                </div>
            </form>
        }
    </div>

    <div class="navigation-buttons">
        @foreach (var connection in Model.AvailableConnections)
        {
            if (connection.ToLocationId != Model.CurrentLocation.Id)
            {
                <form method="post" asp-page-handler="HandleChangeLocation">
                    <button type="button" onclick="changeLocation(this, @connection.ToLocationId)" class="nav-button">@connection.Description</button>
                    <input type="hidden" name="locationIdInputValue" />
                </form>
            }
        }
    </div>

    <div class="game-stats">
        <div class="game-stats__energy">
            <span class="icon--energy"></span>
            Energie: @Model.GameState.Energy/20
        </div>
        <div class="game-stats__health">
            <span class="icon--health"></span>
            Zdraví: @Model.GameState.Health/20
        </div>
        <div class="game-stats__turns">
            Počet tahů: @Model.GameState.Turns
        </div>
        <form method="post" asp-page-handler="HandleBadgeClick" class="badges-list">
            <div onclick="handleBadgeClick(this, 'Sword')" class="single-tool__badge" style="background-image: url('@(gameState.Sword ? "/Images/Icons/sword-badge.png" : "/Images/Icons/sword-badge-disabled.png")')"></div>
            <div onclick="handleBadgeClick(this, 'Axe')" class="single-tool__badge" style="background-image: url('@(gameState.Axe ? "/Images/Icons/axe-badge.png" : "/Images/Icons/axe-badge-disabled.png")')"></div>
            <div onclick="handleBadgeClick(this, 'Pickaxe')" class="single-tool__badge" style="background-image: url('@(gameState.Pickaxe ? "/Images/Icons/pickaxe-badge.png" : "/Images/Icons/pickaxe-badge-disabled.png")')"></div>
            <div onclick="handleBadgeClick(this, 'Shears')" class="single-tool__badge" style="background-image: url('@(gameState.Shears ? "/Images/Icons/shears-badge.png" : "/Images/Icons/shears-badge-disabled.png")')"></div>
            <div onclick="handleBadgeClick(this, 'Backpack')" class="single-tool__badge" style="background-image: url('@(gameState.Backpack ? "/Images/Icons/backpack-badge.png" : "/Images/Icons/backpack-badge-disabled.png")')"></div>
            <input type="hidden" name="badgeType" />
        </form>
    </div>
</div>

<script>
    var cardFlipped = false;

    const handleCardAnimation = (card) => {
        cardFlipped = true;
        card.classList.add("flipped");
        var cards = document.querySelectorAll('.card');
        cards.forEach(function (cardElement) {
            if (cardElement !== card) {
                cardElement.style.pointerEvents = 'none'; // Zabrání kliknutí na kartu
            }
        });
    }
    const handleCardClick = (card) => {
        card.closest("form").submit();
    }
    const handleRiskToggler = (toggler) => {
        if (cardFlipped == false) {
            toggler.closest("form").submit();
        }
    }

    const handleBadgeClick = (div, badgeType) => {
        var formBadge = div.closest("form");
        formBadge.querySelector("[name='badgeType']").value = badgeType;
        formBadge.submit();
    }
    const changeLocation = (div, locationId) => {
        if (!cardFlipped) {
            var formLocation = div.closest("form");
            formLocation.querySelector("[name='locationIdInputValue']").value = locationId;
            formLocation.submit();
        }
    }
</script>

