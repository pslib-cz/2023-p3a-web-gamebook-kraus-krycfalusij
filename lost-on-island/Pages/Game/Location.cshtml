@page
@model lost_on_island.Pages.Game.LocationModel
@{
    var GameState = Model.GameState;
    var jsAvailableConnectionsIds = Json.Serialize(Model.AvailableConnectionsIds);
}


<div class="game-container">
    <div id="gameOverlay" class="game-overlay @(Model.GameState.IsInventoryOpen ? "game-overlay--active" : "")" onclick="@(Model.GameState.ShowTutorial ? null : "disableMap(); disableInventory();")"></div>
    <form method="post" class="show-tutorial__form" asp-page-handler="ShowTutorial">
        <button type="submit" class="show-tutorial__button">Návod</button>
    </form>
    @if (Model.GameState.ShowTutorial)
    {
        <div class="tutorial__container">
            <div class="tutorial__header">
                <p class="tutorial__header__text">Návod</p>
            </div>
            <div id="tutorialImage" class="tutorial__image" style="background-image: url('/Images/tutorial-1.png');">
                <form method="post" asp-page-handler="HideTutorial" id="tutorialForm" style="display: none;">
                </form>
            </div>
        </div>

        <script>
            var overlay = document.querySelector(".game-overlay");
            overlay.classList.add("game-overlay--active");
            var tutorialImage = document.getElementById('tutorialImage');
            var tutorialForm = document.getElementById('tutorialForm');
            var tutorialImages = [
                '/Images/tutorial-1.png',
                '/Images/tutorial-2.png',
                '/Images/tutorial-3.png'
            ];
            var currentImageIndex = 0;

            tutorialImage.addEventListener('click', function () {
                if (currentImageIndex < tutorialImages.length - 1) {
                    currentImageIndex++;
                    tutorialImage.style.backgroundImage = 'url(' + tutorialImages[currentImageIndex] + ')';
                } else {
                    overlay.classList.remove("game-overlay--active");
                    tutorialForm.submit();
                }
            });
        </script>
    }

    <div style="background-image: url('@Url.Content($"~/../{Model.CurrentLocation.ImagePath}")')" class="background-overlay"></div>
    <div class="location__title__container">
        <h1 class="location__title--font location__title--header">@Model.CurrentLocation.Title</h1>
        <p class="location__title--font location__title--description">@Model.CurrentLocation.Description</p>
    </div>


    <form method="post" asp-page-handler="ToggleRiskyMode">
        <button type="button" onClick="handleRiskToggler(this)" class="button-toggle @(Model.GameState.IsRiskyMode ? "risky" : "safe")" style="background-image: url('@Url.Content("~/Images/icons/riskysafebutton.png")');">
        </button>
    </form>

    <div class="card-pack">
        @for (int i = 0; i < 3; i++)
        {
            <form method="post" asp-page-handler="HandleCardClick" class="card-form">
                <div class="card card-pack__background" style="background-image: url('@(Model.GameState.IsRiskyMode ? "/Images/card-risk-background.png" : "/Images/card-safe-background.png")');">
                </div>
                <div class="card" onclick="handleCardAnimation(this)">
                    <div class="card--inner">
                        <div style="background-image: url('@(Model.GameState.IsRiskyMode ? "/Images/card-risk-background.png" : "/Images/card-safe-background.png")');" class="card--back">
                        </div>
                        <input type="hidden" name="cardId" value="@Model.SingleLocationCard.Id" />

                        <div class="card--front" onclick="handleCardClick(this)" style="background-image: url('@(Model.GameState.IsRiskyMode ? "/Images/card-risk-foreground.png" : "/Images/card-safe-foreground.png")');">
                            <h3 class="card__title">@Model.SingleLocationCard.Title</h3>
                            <p class ="card__description">@Model.SingleLocationCard.Description</p>
                            <img class="card__icon" src="@Model.SingleLocationCard.Img" alt="Card Image" />
                            @if (Model.SingleLocationCard.Item != "enemy")
                            {
                                <p class="card__description">@(Model.SingleLocationCard.ItemCount > 0 ? "+" : "")@Model.SingleLocationCard.ItemCount @Model.SingleLocationCard.ItemDescription</p>
                            }
                            else
                            {
                                <p></p>
                            }
                        </div>
                    </div>
                </div>
            </form>
        }
    </div>

    
    <div class="toggler map__toggler" onclick="enableMap()">
        <img class="toggler__icon" src="/Images/Icons/map.png"/>
    </div>
    <div class="map__container"> 
        <div class="map__header__section">
            <span class="map__header__close-button" onclick="disableMap()"></span>
            <p class="map__header">Mapa</p>
            <div></div>
        </div>
        <div class="map__image__section">
            <form method="post" asp-page-handler="HandleChangeLocation">
                <p onclick="changeLocation(this, 2)" class="location__tag tag--shipwreck @(Model.AvailableConnectionsIds.Contains(2) ? "tag--green" : Model.CurrentLocation.Id == 2 ? "tag--yellow" : "tag--red")">
                    Loď
                </p>
                <p onclick="changeLocation(this, 3)" class="location__tag tag--beach @(Model.AvailableConnectionsIds.Contains(3) ? "tag--green" : Model.CurrentLocation.Id == 3 ? "tag--yellow" : "tag--red")">
                    Pláž
                </p>
                <p onclick="changeLocation(this, 4)" class="location__tag tag--field @(Model.AvailableConnectionsIds.Contains(4) ? "tag--green" : Model.CurrentLocation.Id == 4 ? "tag--yellow" : "tag--red")">
                    Louka
                </p>
                <p onclick="changeLocation(this, 5)" class="location__tag tag--forest @(Model.AvailableConnectionsIds.Contains(5) ? "tag--green" : Model.CurrentLocation.Id == 5 ? "tag--yellow" : "tag--red")">
                    Les
                </p>
                <p onclick="changeLocation(this, 6)" class="location__tag tag--cave @(Model.AvailableConnectionsIds.Contains(6) ? "tag--green" : Model.CurrentLocation.Id == 6 ? "tag--yellow" : "tag--red")">
                    Jeskyně
                </p>
                <p onclick="changeLocation(this, 7)" class="location__tag tag--deep-forest @(Model.AvailableConnectionsIds.Contains(7) ? "tag--green" : Model.CurrentLocation.Id == 7 ? "tag--yellow" : "tag--red")">
                    Hluboký les
                </p>
                <input type="hidden" name="locationIdInputValue" />
            </form>
        </div>
        <div class="map__description__section">
            <p class="map__description">(? Kliknutím na místo se přesměrujete na danou lokaci, pokud je dostupná.)</p>
        </div>
    </div>

    <div class="toggler inventory__toggler" onclick="enableInventory()">
        <img class="toggler__icon" src="/Images/Icons/inventory.png" />
    </div>
    <div class="inventory__container @(Model.GameState.IsInventoryOpen ? "inventory__container__enabled" : "")">
        <div class="inventory__header__section">
            <p class="inventory__header">Inventář</p>
            <span class="inventory__header__close-button" onclick="disableInventory()"></span>
        </div>
        <div class="inventory__items__section">
            <div class="inventory__item">
                <p class="inventory__item__count">@Model.GameState.Inventory.Items["food"]×</p>
                <img class="inventory__item__icon" src="/Images/icons/food.png" />
                <div class="inventory__item__info">
                    <span class="inventory__item__info__name">Jídlo</span>
                    <span class="inventory__item__info__description">
                        Nutné k doplnění energie.
                        Najdeš ho všude, nejvíce na louce.
                    </span>
                </div>
                <form method="post" asp-page-handler="EatItem">
                    <input type="hidden" name="itemName" value="food" />
                    <input type="hidden" name="itemCount" value="1" />
                    <button type="button" onclick="handleItemAction(this)" class="inventory__item__eat-button">Sníst</button>
                </form>
            </div>
            
            <div class="inventory__item">
                <span class="inventory__item__count">@Model.GameState.Inventory.Items["wood"]×</span>
                <img class="inventory__item__icon" src="/Images/icons/wood.png" />
                <div class="inventory__item__info">
                    <span class="inventory__item__info__name">Dřevo</span>
                    <span class="inventory__item__info__description">
                        Nutný k opravě lodi.
                        Najdeš ho hlavně v lesích.
                    </span>
                </div>
                <form method="post" asp-page-handler="RemoveItem">
                    <input type="hidden" name="itemName" value="wood" />
                    <input type="hidden" name="itemCount" value="1" />
                    <button type="button" onclick="handleItemAction(this)" class="inventory__item__remove-button">Odebrat</button>
                </form>
            </div>

            <div class="inventory__item">
                <span class="inventory__item__count">@Model.GameState.Inventory.Items["stone"]×</span>
                <img class="inventory__item__icon" src="/Images/icons/stone.png" />
                <div class="inventory__item__info">
                    <span class="inventory__item__info__name">Kámen</span>
                    <span class="inventory__item__info__description">
                        Nutné k opravě lodi
                        Najdeš ho hlavně v jeskyních.
                    </span>
                </div>
                <form method="post" asp-page-handler="RemoveItem">
                    <input type="hidden" name="itemName" value="stone" />
                    <input type="hidden" name="itemCount" value="1" />

                    <button type="button" onclick="handleItemAction(this)" class="inventory__item__remove-button">Odebrat</button>
                </form>
            </div>
            
            <div class="inventory__item">
                <span class="inventory__item__count">@Model.GameState.Inventory.Items["iron"]×</span>
                <img class="inventory__item__icon" src="/Images/icons/iron.png" />
                <div class="inventory__item__info">
                    <span class="inventory__item__info__name">Železo</span>
                    <span class="inventory__item__info__description">
                        Nutné k opravě lodi.
                        Vytěžíš ho krumpáčem v jeskyních.
                    </span>
                </div>
                <form method="post" asp-page-handler="RemoveItem">
                    <input type="hidden" name="itemName" value="iron" />
                    <input type="hidden" name="itemCount" value="1" />

                    <button type="button" onclick="handleItemAction(this)" class="inventory__item__remove-button">Odebrat</button>
                </form>
            </div>
            
            <div class="inventory__item">
                <span class="inventory__item__count">@Model.GameState.Inventory.Items["rope"]×</span>
                <img class="inventory__item__icon" src="/Images/icons/rope.png" />
                <div class="inventory__item__info">
                    <span class="inventory__item__info__name">Lano</span>
                    <span class="inventory__item__info__description">
                        Nutné k opravě lodě
                        Najdeš ho v hlubokém lese
                        na liánách.
                    </span>
                </div>
                <form method="post" asp-page-handler="RemoveItem">
                    <input type="hidden" name="itemName" value="rope" />
                    <input type="hidden" name="itemCount" value="1" />

                    <button type="button" onclick="handleItemAction(this)" class="inventory__item__remove-button">Odebrat</button>
                </form>
            </div>

            <div class="inventory__item">
                <span class="inventory__item__count">@Model.GameState.Inventory.Items["wool"]×</span>
                <img class="inventory__item__icon" src="/Images/icons/wool.png" />
                <div class="inventory__item__info">
                    <span class="inventory__item__info__name">Vlna</span>
                    <span class="inventory__item__info__description">
                        Nutné k opravě lodi.
                        Lze ji vzít pomocí nůžek z ovce.
                    </span>
                </div>
                <form method="post" asp-page-handler="RemoveItem">
                    <input type="hidden" name="itemName" value="wool" />
                    <input type="hidden" name="itemCount" value="1" />

                    <button type="button" onclick="handleItemAction(this)" class="inventory__item__remove-button">Odebrat</button>
                </form>
            </div>

            <div class="inventory__item">
                <span class="inventory__item__count">@Model.GameState.Inventory.Items["bamboo"]×</span>
                <img class="inventory__item__icon" src="/Images/icons/bamboo.png" />
                <div class="inventory__item__info">
                    <span class="inventory__item__info__name">Bambus</span>
                    <span class="inventory__item__info__description">
                        Nutné k opravě lodi.
                        Lze ho najít na pláži.
                    </span>
                </div>
                <form method="post" asp-page-handler="RemoveItem">
                    <input type="hidden" name="itemName" value="bamboo" />
                    <input type="hidden" name="itemCount" value="1" />

                    <button type="button" onclick="handleItemAction(this)" class="inventory__item__remove-button">Odebrat</button>
                </form>
            </div>

        </div>
        <div class="inventory__capacity">
            <img class="inventory__item__icon" src="/Images/icons/inventory.png" />
            <p>
                Kapacita: @Model.GameState.Inventory.Items.Values.Sum() / @Model.GameState.InventoryCapacity
            </p>
        </div>
            @if (Model.GameState.CurrentShipBuildingPhaseIndex < Model.GameState.shipBuildingPhases.Count)
            {
                var currentPhase = Model.GameState.shipBuildingPhases[Model.GameState.CurrentShipBuildingPhaseIndex];
                <div class="inventory__shipbuild">
                    <p>Aktuálně potřeba:</p>
                    <ul class="materials-list">
                        @foreach (var material in currentPhase.RequiredMaterials)
                        {
                            <li>
                                <span class="material-amount">@material.Value×</span>
                                <span class="material-icon @material.Key"></span>
                            </li>
                        }
                    </ul>
                </div>
            }
    </div>
    <div class="game-stats">
        <div class="game-stats__energy">
            <span class="icon--energy"></span>
            <span>Energie: @Model.GameState.Energy/20</span>
        </div>
        <div class="game-stats__info-text">
            <span>@Model.GameState.InfoText</span>
        </div>
        <div class="game-stats__info-text info-text--special">
            <span>@Model.GameState.InfoText2</span>
        </div>
        <div class="game-stats__health">
            <span class="icon--health"></span>
            <span>Zdraví: @Model.GameState.Health/20</span>
        </div>
        <div class="game-stats__turns">
            <span>Počet tahů: @Model.GameState.Turns</span>
        </div>
        <form method="post" asp-page-handler="HandleBadgeClick" class="badges-list">
            <div class="single-tool__badge__wrapper">
                <div class="single-tool__badge__infobox" id="infoSword">
                    @{
                        var toolSword = Model.Tools.FirstOrDefault(tool => tool.Type == "Sword");

                        if (toolSword != null)
                        {
                            <p class="infobox__material__title">@toolSword.Title</p>
                            <div class="infobox__materials__container">
                                @foreach (var singleMaterial in toolSword.Materials)
                                {
                                    <div class="infobox__single__material__container">
                                        <p class="infobox__single__material__description">@singleMaterial.Title: @singleMaterial.Count</p>
                                        <img class="infobox__single__material__icon" src="/Images/Icons/@(singleMaterial.Type).png" alt="@(singleMaterial.Title).png" />
                                    </div>
                                }
                            </div>
                            <p class="infobox__description">@toolSword.Description</p>
                            bool canCraft = true;
                            for (int i = 0; i < toolSword.Materials.Count; i++)
                            {
                                var itemType = toolSword.Materials[i].Type.ToLowerInvariant();
                                var itemCount = toolSword.Materials[i].Count;

                                canCraft = canCraft && (Model.GameState.Inventory.Items[itemType] >= itemCount);
                            }
                            if (!Model.GameState.Sword)
                            {
                                <button class="infobox__button--buy" style="@(canCraft ? null : "background-color: lightgray; color: gray; border-color: gray")" type="button" onclick="@if (canCraft) {
                            @($"handleBadgeCraft(this, '{toolSword.Type}')")
}">
                                    Koupit
                                </button>
                            }
                        }
                    }
                </div>
                <div onclick="handleBadgeClick(this, 'Sword')" class="single-tool__badge" style="background-image: url('@(Model.GameState.Sword ? "/Images/Icons/sword-badge.png" : "/Images/Icons/sword-badge-disabled.png")')"></div>
            </div>
            <div class="single-tool__badge__wrapper">
                <div class="single-tool__badge__infobox" id="infoAxe">
                    @{
                        var toolAxe = Model.Tools.FirstOrDefault(tool => tool.Type == "Axe");

                        if (toolAxe != null)
                        {
                            <p class="infobox__material__title">@toolAxe.Title</p>
                            <div class="infobox__materials__container">
                                @foreach (var singleMaterial in toolAxe.Materials)
                                {
                                    <div class="infobox__single__material__container">
                                        <p class="infobox__single__material__description">@singleMaterial.Title: @singleMaterial.Count</p>
                                        <img class="infobox__single__material__icon" src="/Images/Icons/@(singleMaterial.Type).png" alt="@(singleMaterial.Title).png" />
                                    </div>
                                }
                            </div>
                            <p class="infobox__description">@toolAxe.Description</p>
                            bool canCraft = true;
                            for (int i = 0; i < toolAxe.Materials.Count; i++)
                            {
                                var itemType = toolAxe.Materials[i].Type.ToLowerInvariant();
                                var itemCount = toolAxe.Materials[i].Count;

                                canCraft = canCraft && (Model.GameState.Inventory.Items[itemType] >= itemCount);
                            }
                            if (!Model.GameState.Axe)
                            {
                                <button class="infobox__button--buy" style="@(canCraft ? null : "background-color: lightgray; color: gray; border-color: gray")" type="button" onclick="@if (canCraft) {
                            @($"handleBadgeCraft(this, '{toolAxe.Type}')")
}">
                                    Koupit
                                </button>
                            }
                        }
                    }
                </div>
                <div onclick="handleBadgeClick(this, 'Axe')" class="single-tool__badge" style="background-image: url('@(Model.GameState.Axe ? "/Images/Icons/axe-badge.png" : "/Images/Icons/axe-badge-disabled.png")')"></div>
            </div>
            <div class="single-tool__badge__wrapper">
                <div class="single-tool__badge__infobox" id="infoPickaxe">
                    @{
                        var toolPickaxe = Model.Tools.FirstOrDefault(tool => tool.Type == "Pickaxe");

                        if (toolPickaxe != null)
                        {
                            <p class="infobox__material__title">@toolPickaxe.Title</p>
                            <div class="infobox__materials__container">
                                @foreach (var singleMaterial in toolPickaxe.Materials)
                                {
                                    <div class="infobox__single__material__container">
                                        <p class="infobox__single__material__description">@singleMaterial.Title: @singleMaterial.Count</p>
                                        <img class="infobox__single__material__icon" src="/Images/Icons/@(singleMaterial.Type).png" alt="@(singleMaterial.Title).png" />
                                    </div>
                                }
                            </div>
                            <p class="infobox__description">@toolPickaxe.Description</p>
                            bool canCraft = true;
                            for (int i = 0; i < toolPickaxe.Materials.Count; i++)
                            {
                                var itemType = toolPickaxe.Materials[i].Type.ToLowerInvariant();
                                var itemCount = toolPickaxe.Materials[i].Count;

                                canCraft = canCraft && (Model.GameState.Inventory.Items[itemType] >= itemCount);
                            }
                            if (!Model.GameState.Pickaxe)
                            {
                                <button class="infobox__button--buy" style="@(canCraft ? null : "background-color: lightgray; color: gray; border-color: gray")" type="button" onclick="@if (canCraft) {
                            @($"handleBadgeCraft(this, '{toolPickaxe.Type}')")
}">
                                    Koupit
                                </button>
                            }
                        }
                    }
                </div>
                <div onclick="handleBadgeClick(this, 'Pickaxe')" class="single-tool__badge" style="background-image: url('@(Model.GameState.Pickaxe ? "/Images/Icons/pickaxe-badge.png" : "/Images/Icons/pickaxe-badge-disabled.png")')"></div>
            </div>
            <div class="single-tool__badge__wrapper">
                <div class="single-tool__badge__infobox" id="infoShears">
                    @{
                        var toolShears = Model.Tools.FirstOrDefault(tool => tool.Type == "Shears");

                        if (toolShears != null)
                        {
                            <p class="infobox__material__title">@toolShears.Title</p>
                            <div class="infobox__materials__container">
                                @foreach (var singleMaterial in toolShears.Materials)
                                {
                                    <div class="infobox__single__material__container">
                                        <p class="infobox__single__material__description">@singleMaterial.Title: @singleMaterial.Count</p>
                                        <img class="infobox__single__material__icon" src="/Images/Icons/@(singleMaterial.Type).png" alt="@(singleMaterial.Title).png" />
                                    </div>
                                }
                            </div>
                            <p class="infobox__description">@toolShears.Description</p>
                            bool canCraft = true;
                            for (int i = 0; i < toolShears.Materials.Count; i++)
                            {
                                var itemType = toolShears.Materials[i].Type.ToLowerInvariant();
                                var itemCount = toolShears.Materials[i].Count;

                                canCraft = canCraft && (Model.GameState.Inventory.Items[itemType] >= itemCount);
                            }
                            if (!Model.GameState.Shears)
                            {
                                <button class="infobox__button--buy" style="@(canCraft ? null : "background-color: lightgray; color: gray; border-color: gray")" type="button" onclick="@if (canCraft) {
                            @($"handleBadgeCraft(this, '{toolShears.Type}')")
}">
                                    Koupit
                                </button>
                            }
                        }
                    }
                </div>
                <div onclick="handleBadgeClick(this, 'Shears')" class="single-tool__badge" style="background-image: url('@(Model.GameState.Shears ? "/Images/Icons/shears-badge.png" : "/Images/Icons/shears-badge-disabled.png")')"></div>
            </div>
            <div class="single-tool__badge__wrapper">
                <div class="single-tool__badge__infobox" id="infoBackpack">
                    @{
                        var toolBackpack = Model.Tools.FirstOrDefault(tool => tool.Type == "Backpack");

                        if (toolBackpack != null)
                        {
                            <p class="infobox__material__title">@toolBackpack.Title</p>
                            <div class="infobox__materials__container">
                                @foreach (var singleMaterial in toolBackpack.Materials)
                                {
                                    <div class="infobox__single__material__container">
                                        <p class="infobox__single__material__description">@singleMaterial.Title: @singleMaterial.Count</p>
                                        <img class="infobox__single__material__icon" src="/Images/Icons/@(singleMaterial.Type).png" alt="@(singleMaterial.Title).png" />
                                    </div>
                                }
                            </div>
                            <p class="infobox__description">@toolBackpack.Description</p>
                            bool canCraft = true;
                            for (int i = 0; i < toolBackpack.Materials.Count; i++)
                            {
                                var itemType = toolBackpack.Materials[i].Type.ToLowerInvariant();
                                var itemCount = toolBackpack.Materials[i].Count;

                                canCraft = canCraft && (Model.GameState.Inventory.Items[itemType] >= itemCount);
                            }
                            if (!Model.GameState.Backpack)
                            {
                                <button class="infobox__button--buy" style="@(canCraft ? null : "background-color: lightgray; color: gray; border-color: gray")" type="button" onclick="@if (canCraft) {
                            @($"handleBadgeCraft(this, '{toolBackpack.Type}')")
}">
                                    Koupit
                                </button>
                            }
                        }
                    }
                </div>
                <div onclick="handleBadgeClick(this, 'Backpack')" class="single-tool__badge" style="background-image: url('@(Model.GameState.Backpack ? "/Images/Icons/backpack-badge.png" : "/Images/Icons/backpack-badge-disabled.png" )')"></div>
            </div>
            <input type="hidden" name="badgeType" />
        </form>
    </div>
</div>

<script>
    var cardFlipped = false;
    let infoboxTimeout;
    const availableConnectionsIds = @Html.Raw(jsAvailableConnectionsIds);

    const handleCardAnimation = (card) => {
        cardFlipped = true;

        card.classList.add("flipped");
        var cards = document.querySelectorAll('.card');
        cards.forEach(function (cardElement) {
            if (cardElement !== card) {
                cardElement.style.pointerEvents = 'none'; 
            }
        });
    }

    function handleItemAction(button) {
        if (!cardFlipped) {
            button.closest("form").submit();
        }
    }

    const handleCardClick = (card) => {
        card.closest("form").submit();
    }
    const handleRiskToggler = (toggler) => {
        if (cardFlipped == false) {
            toggler.closest("form").submit();
        }
    }
    const handleBadgeClick = (div, badgeType) => {
        if (!cardFlipped) {

            const allInfoboxes = document.querySelectorAll(".single-tool__badge__infobox__enabled");
            allInfoboxes.forEach((infobox) => {
                infobox.classList.remove("single-tool__badge__infobox__enabled");
            });

            const infoboxId = `info${badgeType}`;
            const infobox = document.getElementById(infoboxId);

            if (infobox) {
                infobox.classList.add("single-tool__badge__infobox__enabled");
                if (infoboxTimeout) {
                    clearTimeout(infoboxTimeout);
                }
                infoboxTimeout = setTimeout(() => {
                    infobox.classList.remove("single-tool__badge__infobox__enabled");
                }, 3000);
            }

            var formBadge = div.closest("form");
            formBadge.querySelector("[name='badgeType']").value = badgeType;
        }
    };
    const handleBadgeCraft = (button, badgeType) => {
        var formBadge = button.closest("form");
        formBadge.querySelector("[name='badgeType']").value = badgeType;
        formBadge.submit();
    }
    const changeLocation = (div, locationId) => {
        if (!cardFlipped && availableConnectionsIds.includes(locationId)) {
            var formLocation = div.closest("form");
            formLocation.querySelector("[name='locationIdInputValue']").value = locationId;
            formLocation.submit();
        }
    }
    const enableMap = () => {
        var map = document.querySelector(".map__container");
        map.classList.add("map__container__enabled");
        var overlay = document.querySelector(".game-overlay");
        overlay.classList.add("game-overlay--active");
    }

    const disableMap = () => {
        var map = document.querySelector(".map__container");
        map.classList.remove("map__container__enabled");
        var overlay = document.querySelector(".game-overlay");
        overlay.classList.remove("game-overlay--active");
    }

    document.addEventListener("DOMContentLoaded", function () {
        var inventoryOpen = localStorage.getItem('inventoryOpen');
        if (inventoryOpen === 'true') {
            enableInventory(false);
        }
        var text2 = document.querySelector(".info-text--special");
        const timeout = setTimeout(() => {
            text2 = text2.classList.add("info-text--special--hidden");
        }, 2500);

    });

    function enableInventory(withAnimation = true) {
        var inventory = document.querySelector(".inventory__container");
        if (!withAnimation) {
            inventory.classList.add("inventory__container__no-animation");
        }
        inventory.classList.add("inventory__container__enabled");
        var overlay = document.querySelector(".game-overlay");
        overlay.classList.add("game-overlay--active");
        localStorage.setItem('inventoryOpen', 'true');
    }

    function disableInventory() {
        var inventory = document.querySelector(".inventory__container");
        inventory.classList.remove("inventory__container__enabled");
        inventory.classList.remove("inventory__container__no-animation");
        var overlay = document.querySelector(".game-overlay");
        overlay.classList.remove("game-overlay--active");
        localStorage.setItem('inventoryOpen', 'false');
    }


    /* pro zvukové efekty
    playClickSound()
    function playClickSound() {
        var audio = new Audio("/sounds/click-sound-1.mp3");
        audio.play();
    }
    */
</script>

